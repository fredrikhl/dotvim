*dotvim.txt* some dotfiles for vim

====================================================================
CONTENTS                                            *DotVimContents*

    1. Directories .......... |DotVimDirectories|
    2. Bundles .............. |DotVimBundles|
    3. Customizing .......... |DotVimConfigure|
    4. Other ................ |DotVimOther|


====================================================================
Section 1: Directories                           *DotVimDirectories*

The directory layout of this set of dotfiles looks something like:

    .vim/
    ├─ .backup/ ......... |DotVimHidden|
    ├─ .env/ ............ |DotVimPandemic|
    ├─ .swap/ ........... |DotVimHidden|
    ├─ .undo/ ........... |DotVimHidden|
    ├─ autoload/ ........ |DotVimPlugin|
    ├─ bundle/ .......... |DotVimBundles|
    ├─ bundle.remote/ ... |DotVimBundles|
    ├─ common/ .......... |DotVimCommonConfig|
    ├─ doc/ ............. |DotVimPlugin|
    ├─ ftdetect/ ........ |DotVimPlugin|
    ├─ hosts/ ........... |DotVimHosts|
    ├─ pandemic-bundles . |DotVimPandemic|
    ├─ plugin/ .......... |DotVimPlugin|
    ├─ presets/ ......... |DotVimPresets|
    ├─ setup.sh ......... |DotVimPandemic|
    ├─ snippets/ ........ |DotVimSnippets|
    └─ vimrc ............ |DotVimConfigure|

Todo: Figure out if it's possible to link to helptags outside of
      this file?


--------------------------------------------------------------------
Section 1.1: Temporary files                          *DotVimHidden*

We configure vim to store all turds/temporary files to common
directories within ~/.vim/

See: .backup/ |backup| (`help backup`)
     .swap/   |swap-file| (`help swap-file`)
     .undo/   |undodir| (`help undodir`)


====================================================================
Section 2: Bundles                               *DotVimDirectories*

If pathogen can be found (in autoload, or a bundle directory), it
will be loaded and in sequence add paths from `bundle` and
`bundle.remote` to the runtimepath.

The `bundle` directory is intended to hold _local_ vim bundles,
while the `bundle.remote` holds bundles that are managed by
Pandemic.

Want to install a package?

  If it's for testing out, or something you only need on one specific
  host, just clone it to the `bundles` directory, and let Pathogen
  autoload it. Remember to run `:Helptags` (vim -c Helptags -c quit)
  to get access to any documentation that comes with the bundle.

  If it's something you want in all your vim environments, add it to
  `pandemic-bundles` and run `setup.sh`.

Todo: Look into using another plugin manager?

  * Vundle (https://github.com/VundleVim/Vundle.vim)
  * dein.vim (https://github.com/Shougo/dein.vim)
  * vim-plug (https://github.com/junegunn/vim-plug)

See: |runtimepath| (`help runtimepath`)


--------------------------------------------------------------------
Section 2.1: Pathogen                               *DotVimPathogen*

If pathogen can be found (in autoload, or a bundle directory), it
will be loaded and in sequence add paths from `bundle` and
`bundle.remote` to the runtimepath.

See: https://github.com/tpope/vim-pathogen


--------------------------------------------------------------------
Section 2.2: Pandemic                               *DotVimPandemic*

Everything in `bundle.remote` is handled by Pandemic. The file
`pandemic-bundles` contains a list of common plugins to install and
keep up to date.

Pandemic is a python package and script, so we install it in its own
virtualenv, `.env`.

The script `setup.sh` will:

1. Make sure Pandemic is installed in `.env`, and up to date.
2. Update all bundles in `bundle.remote` using the `pandemic-bundles`
   config.
3. Update helptags using the Pathogen `:Helptags` command.

See: https://github.com/jwcxz/vim-pandemic


====================================================================
Section 3: Customize                               *DotVimConfigure*

Vim settings are split into multiple, smaller vim-files. The
~/.vim/vimrc sets up swap/backup turds (see |DotVimHidden|), and then
sources files from the following directories, in order:

1. ~/.vim/common   |DotVimCommonConfig|
2. ~/.vim/presets  |DotVimPresets|
3. ~/.vim/hosts    |DotVimHosts|


--------------------------------------------------------------------
Section 3.1: Common configuration               *DotVimCommonConfig*

All `*.vim' files in in ~/.vim/common gets sourced, no matter what.
If you want to set a common setting, set it there.


--------------------------------------------------------------------
Section 3.2: Preset configurations                   *DotVimPresets*

This directory contain configuration presets.

Each named preset ~/.vim/presets/<name>.vim gets loaded if it appears
in the environment variable |$VIMPRESETS|.

                                                       *$VIMPRESETS*

|$VIMPRESETS| is a ':'-separated ordered list of presets to load.

Example: `! export VIMPRESETS='work:unix:color16'`


--------------------------------------------------------------------
Section 3.3: Host configuration                        *DotVimHosts*

Configuration for a specific host can be split into separate configs
and put into ~/.vim/hosts/<hostname>.vim

If the output of `hostname()` contains `<hostname>`, the config is
loaded (`hostname() =~ <hostname>`).

This means that the <hostname> can be the FQDN of the host, or just a
label. If the hostname is 'myhost.example.org', any of the following
files should match:

- myhost.example.org.vim
- myhost.example.vim
- example.org.vim
- myhost.vim

Unfortunately, so will:

- host.example.vim
- h.vim

Todo: Implement better hostname matching


See: |hostname()| (`help hostname()`)


====================================================================
Section 4: Other stuff                                 *DotVimOther*


--------------------------------------------------------------------
Section 4.1: Plugins                                  *DotVimPlugin*

All 3rd party plugins are basically added as `bundles` using Pathogen.
This frees up the vim plugin directory structure so that we can use them as
intended, but for our own functionality.

- autoload
- colors
- compiler
- ftplugin
- indent
- keymap
- lang
- macros
- plugin
- tools
- tutor

These folders now contains custom plugins that are bundled with this dotvim
setup.


--------------------------------------------------------------------
Section 4.2: Snipmate snippets                      *DotVimSnippets*

Just a directory for storing text snippets.

See: https://github.com/garbas/vim-snipmate
